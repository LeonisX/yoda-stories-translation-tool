package md.leonis.ystt.utils;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import javafx.scene.paint.Color;
import md.leonis.ystt.oldmodel2.Release;
import md.leonis.ystt.oldmodel2.Section;
import md.leonis.ystt.oldmodel.*;

import java.awt.image.IndexColorModel;
import java.io.*;
import java.lang.reflect.Type;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import java.util.stream.Collectors;

public class Config {
    /*static String apiPath;
    public static String sitePath;
    static String sampleVideo;*/

    // BGRA
    public static int[] gamePalette = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x8B, 0x00, 0xC3, 0xCF, 0x4B, 0x00,
            0x8B, 0xA3, 0x1B, 0x00, 0x57, 0x77, 0x00, 0x00, 0x8B, 0xA3, 0x1B, 0x00, 0xC3, 0xCF, 0x4B, 0x00,
            0xFB, 0xFB, 0xFB, 0x00, 0xEB, 0xE7, 0xE7, 0x00, 0xDB, 0xD3, 0xD3, 0x00, 0xCB, 0xC3, 0xC3, 0x00,
            0xBB, 0xB3, 0xB3, 0x00, 0xAB, 0xA3, 0xA3, 0x00, 0x9B, 0x8F, 0x8F, 0x00, 0x8B, 0x7F, 0x7F, 0x00,
            0x7B, 0x6F, 0x6F, 0x00, 0x67, 0x5B, 0x5B, 0x00, 0x57, 0x4B, 0x4B, 0x00, 0x47, 0x3B, 0x3B, 0x00,
            0x33, 0x2B, 0x2B, 0x00, 0x23, 0x1B, 0x1B, 0x00, 0x13, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0xC7, 0x43, 0x00, 0x00, 0xB7, 0x43, 0x00, 0x00, 0xAB, 0x3F, 0x00, 0x00, 0x9F, 0x3F, 0x00,
            0x00, 0x93, 0x3F, 0x00, 0x00, 0x87, 0x3B, 0x00, 0x00, 0x7B, 0x37, 0x00, 0x00, 0x6F, 0x33, 0x00,
            0x00, 0x63, 0x33, 0x00, 0x00, 0x53, 0x2B, 0x00, 0x00, 0x47, 0x27, 0x00, 0x00, 0x3B, 0x23, 0x00,
            0x00, 0x2F, 0x1B, 0x00, 0x00, 0x23, 0x13, 0x00, 0x00, 0x17, 0x0F, 0x00, 0x00, 0x0B, 0x07, 0x00,
            0x4B, 0x7B, 0xBB, 0x00, 0x43, 0x73, 0xB3, 0x00, 0x43, 0x6B, 0xAB, 0x00, 0x3B, 0x63, 0xA3, 0x00,
            0x3B, 0x63, 0x9B, 0x00, 0x33, 0x5B, 0x93, 0x00, 0x33, 0x5B, 0x8B, 0x00, 0x2B, 0x53, 0x83, 0x00,
            0x2B, 0x4B, 0x73, 0x00, 0x23, 0x4B, 0x6B, 0x00, 0x23, 0x43, 0x5F, 0x00, 0x1B, 0x3B, 0x53, 0x00,
            0x1B, 0x37, 0x47, 0x00, 0x1B, 0x33, 0x43, 0x00, 0x13, 0x2B, 0x3B, 0x00, 0x0B, 0x23, 0x2B, 0x00,
            0xD7, 0xFF, 0xFF, 0x00, 0xBB, 0xEF, 0xEF, 0x00, 0xA3, 0xDF, 0xDF, 0x00, 0x8B, 0xCF, 0xCF, 0x00,
            0x77, 0xC3, 0xC3, 0x00, 0x63, 0xB3, 0xB3, 0x00, 0x53, 0xA3, 0xA3, 0x00, 0x43, 0x93, 0x93, 0x00,
            0x33, 0x87, 0x87, 0x00, 0x27, 0x77, 0x77, 0x00, 0x1B, 0x67, 0x67, 0x00, 0x13, 0x5B, 0x5B, 0x00,
            0x0B, 0x4B, 0x4B, 0x00, 0x07, 0x3B, 0x3B, 0x00, 0x00, 0x2B, 0x2B, 0x00, 0x00, 0x1F, 0x1F, 0x00,
            0xDB, 0xEB, 0xFB, 0x00, 0xD3, 0xE3, 0xFB, 0x00, 0xC3, 0xDB, 0xFB, 0x00, 0xBB, 0xD3, 0xFB, 0x00,
            0xB3, 0xCB, 0xFB, 0x00, 0xA3, 0xC3, 0xFB, 0x00, 0x9B, 0xBB, 0xFB, 0x00, 0x8F, 0xB7, 0xFB, 0x00,
            0x83, 0xB3, 0xF7, 0x00, 0x73, 0xA7, 0xFB, 0x00, 0x63, 0x9B, 0xFB, 0x00, 0x5B, 0x93, 0xF3, 0x00,
            0x5B, 0x8B, 0xEB, 0x00, 0x53, 0x8B, 0xDB, 0x00, 0x53, 0x83, 0xD3, 0x00, 0x4B, 0x7B, 0xCB, 0x00,
            0x9B, 0xC7, 0xFF, 0x00, 0x8F, 0xB7, 0xF7, 0x00, 0x87, 0xB3, 0xEF, 0x00, 0x7F, 0xA7, 0xF3, 0x00,
            0x73, 0x9F, 0xEF, 0x00, 0x53, 0x83, 0xCF, 0x00, 0x3B, 0x6B, 0xB3, 0x00, 0x2F, 0x5B, 0xA3, 0x00,
            0x23, 0x4F, 0x93, 0x00, 0x1B, 0x43, 0x83, 0x00, 0x13, 0x3B, 0x77, 0x00, 0x0B, 0x2F, 0x67, 0x00,
            0x07, 0x27, 0x57, 0x00, 0x00, 0x1B, 0x47, 0x00, 0x00, 0x13, 0x37, 0x00, 0x00, 0x0F, 0x2B, 0x00,
            0xFB, 0xFB, 0xE7, 0x00, 0xF3, 0xF3, 0xD3, 0x00, 0xEB, 0xE7, 0xC7, 0x00, 0xE3, 0xDF, 0xB7, 0x00,
            0xDB, 0xD7, 0xA7, 0x00, 0xD3, 0xCF, 0x97, 0x00, 0xCB, 0xC7, 0x8B, 0x00, 0xC3, 0xBB, 0x7F, 0x00,
            0xBB, 0xB3, 0x73, 0x00, 0xAF, 0xA7, 0x63, 0x00, 0x9B, 0x93, 0x47, 0x00, 0x87, 0x7B, 0x33, 0x00,
            0x6F, 0x67, 0x1F, 0x00, 0x5B, 0x53, 0x0F, 0x00, 0x47, 0x43, 0x00, 0x00, 0x37, 0x33, 0x00, 0x00,
            0xFF, 0xF7, 0xF7, 0x00, 0xEF, 0xDF, 0xDF, 0x00, 0xDF, 0xC7, 0xC7, 0x00, 0xCF, 0xB3, 0xB3, 0x00,
            0xBF, 0x9F, 0x9F, 0x00, 0xB3, 0x8B, 0x8B, 0x00, 0xA3, 0x7B, 0x7B, 0x00, 0x93, 0x6B, 0x6B, 0x00,
            0x83, 0x57, 0x57, 0x00, 0x73, 0x4B, 0x4B, 0x00, 0x67, 0x3B, 0x3B, 0x00, 0x57, 0x2F, 0x2F, 0x00,
            0x47, 0x27, 0x27, 0x00, 0x37, 0x1B, 0x1B, 0x00, 0x27, 0x13, 0x13, 0x00, 0x1B, 0x0B, 0x0B, 0x00,
            0xF7, 0xB3, 0x37, 0x00, 0xE7, 0x93, 0x07, 0x00, 0xFB, 0x53, 0x0B, 0x00, 0xFB, 0x00, 0x00, 0x00,
            0xCB, 0x00, 0x00, 0x00, 0x9F, 0x00, 0x00, 0x00, 0x6F, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00,
            0xBF, 0xBB, 0xFB, 0x00, 0x8F, 0x8B, 0xFB, 0x00, 0x5F, 0x5B, 0xFB, 0x00, 0x93, 0xBB, 0xFF, 0x00,
            0x5F, 0x97, 0xF7, 0x00, 0x3B, 0x7B, 0xEF, 0x00, 0x23, 0x63, 0xC3, 0x00, 0x13, 0x53, 0xB3, 0x00,
            0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xEF, 0x00, 0x00, 0x00, 0xE3, 0x00, 0x00, 0x00, 0xD3, 0x00,
            0x00, 0x00, 0xC3, 0x00, 0x00, 0x00, 0xB7, 0x00, 0x00, 0x00, 0xA7, 0x00, 0x00, 0x00, 0x9B, 0x00,
            0x00, 0x00, 0x8B, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x6F, 0x00, 0x00, 0x00, 0x63, 0x00,
            0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x2B, 0x00,
            0x00, 0xFF, 0xFF, 0x00, 0x00, 0xE3, 0xF7, 0x00, 0x00, 0xCF, 0xF3, 0x00, 0x00, 0xB7, 0xEF, 0x00,
            0x00, 0xA3, 0xEB, 0x00, 0x00, 0x8B, 0xE7, 0x00, 0x00, 0x77, 0xDF, 0x00, 0x00, 0x63, 0xDB, 0x00,
            0x00, 0x4F, 0xD7, 0x00, 0x00, 0x3F, 0xD3, 0x00, 0x00, 0x2F, 0xCF, 0x00, 0x97, 0xFF, 0xFF, 0x00,
            0x83, 0xDF, 0xEF, 0x00, 0x73, 0xC3, 0xDF, 0x00, 0x5F, 0xA7, 0xCF, 0x00, 0x53, 0x8B, 0xC3, 0x00,
            0x2B, 0x2B, 0x00, 0x00, 0x23, 0x23, 0x00, 0x00, 0x1B, 0x1B, 0x00, 0x00, 0x13, 0x13, 0x00, 0x00,
            0xFF, 0x0B, 0x00, 0x00, 0xFF, 0x00, 0x4B, 0x00, 0xFF, 0x00, 0xA3, 0x00, 0xFF, 0x00, 0xFF, 0x00,
            0x00, 0xFF, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0x33, 0x2F, 0x00,
            0x00, 0x00, 0xFF, 0x00, 0x00, 0x1F, 0x97, 0x00, 0xDF, 0x00, 0xFF, 0x00, 0x73, 0x00, 0x77, 0x00,
            0x6B, 0x7B, 0xC3, 0x00, 0x57, 0x57, 0xAB, 0x00, 0x57, 0x47, 0x93, 0x00, 0x53, 0x37, 0x7F, 0x00,
            0x4F, 0x27, 0x67, 0x00, 0x47, 0x1B, 0x4F, 0x00, 0x3B, 0x13, 0x3B, 0x00, 0x27, 0x77, 0x77, 0x00,
            0x23, 0x73, 0x73, 0x00, 0x1F, 0x6F, 0x6F, 0x00, 0x1B, 0x6B, 0x6B, 0x00, 0x1B, 0x67, 0x67, 0x00,
            0x1B, 0x6B, 0x6B, 0x00, 0x1F, 0x6F, 0x6F, 0x00, 0x23, 0x73, 0x73, 0x00, 0x27, 0x77, 0x77, 0x00,
            0xFF, 0xFF, 0xEF, 0x00, 0xF7, 0xF7, 0xDB, 0x00, 0xF3, 0xEF, 0xCB, 0x00, 0xEF, 0xEB, 0xBB, 0x00,
            0xF3, 0xEF, 0xCB, 0x00, 0xE7, 0x93, 0x07, 0x00, 0xE7, 0x97, 0x0F, 0x00, 0xEB, 0x9F, 0x17, 0x00,
            0xEF, 0xA3, 0x23, 0x00, 0xF3, 0xAB, 0x2B, 0x00, 0xF7, 0xB3, 0x37, 0x00, 0xEF, 0xA7, 0x27, 0x00,
            0xEB, 0x9F, 0x1B, 0x00, 0xE7, 0x97, 0x0F, 0x00, 0x0B, 0xCB, 0xFB, 0x00, 0x0B, 0xA3, 0xFB, 0x00,
            0x0B, 0x73, 0xFB, 0x00, 0x0B, 0x4B, 0xFB, 0x00, 0x0B, 0x23, 0xFB, 0x00, 0x0B, 0x73, 0xFB, 0x00,
            0x00, 0x13, 0x93, 0x00, 0x00, 0x0B, 0xD3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00};

    public static Color[] palette = new Color[256];

    public static byte[] ra = new byte[256];
    public static byte[] ga = new byte[256];
    public static byte[] ba = new byte[256];

    public static IndexColorModel icm;

    public static Color transparentColor = Color.rgb(0xF4, 0xF4, 0xF4);



    static {
        updatePalette();
    }

    public static Properties crcs = new Properties();

    public static Properties languageTable;

    static final String resourcePath = "/fxml/";

    public static File saveStateFile;

    public static SaveState saveState;

    public static SaveGame currentSaveGame = null;

    public static Integer currentHeroIndex;
    public static Hero currentHero = null;

    public static List<String> items = null;

    public static List<String> churchs = null;

    public static List<String> heroes = null;

    public static List<String> spells = null;

    // http://www.pscave.com/ps1/faqwalkthrough2.txt
    //TODO read from ROM
    public static List<Item> weapons = null;
    public static List<Item> armors = null;
    public static List<Item> shields = null;
    //public static List<Item> combatSpells = null;
    //public static List<Item> curativeSpells = null;

    public static List<String> weaponNames = null;
    public static List<String> armorNames = null;
    public static List<String> shieldNames = null;

    public static String none;

    public static List<String> states = new LinkedList<>(Arrays.asList("great", "tired", "injured", "weak", "dead"));

    public static Properties levels;

    public static int[][] battleSpells = {{4, 9, 14, 3, 1}, {10, 12, 17, 7}, {}, {3, 11, 18, 6, 13}};
    public static int[][] overworldSpells = {{4, 15}, {10, 16, 2}, {}, {10, 2, 11, 5, 8}};


    public static Section section;

    //static final String resourcePath = "/" + MainStageController.class.getPackage().getName().replaceAll("\\.", "/") + "/";

    /*public static void loadProperties() throws IOException {
        try (InputStream inputStream = Config.class.getClassLoader().getResourceAsStream("config.properties")) {
            if (inputStream == null) throw new FileNotFoundException("Property file not found...");
            Properties prop = new Properties();
            prop.load(inputStream);
        }
    }*/


    public static void updatePalette() {

        for (int i = 0; i < 1024; i += 4) {
            int r = gamePalette[i + 2];
            int g = gamePalette[i + 1];
            int b = gamePalette[i];
            int a = ~gamePalette[i + 3];
            // palette[i / 4] = (a << 24) | (r << 16) | (g << 8) | b;
            palette[i / 4] = Color.rgb(r,g,b);
        }

        for (int i = 0; i < 1024; i += 4) {
            int id = i / 4;
            int r = gamePalette[i + 2];
            int g = gamePalette[i + 1];
            int b = gamePalette[i];
            int a = ~gamePalette[i + 3];
            // palette[i / 4] = (a << 24) | (r << 16) | (g << 8) | b;
            palette[id] = Color.rgb(r, g, b);

            ra[id] = (byte) r;
            ga[id] = (byte) g;
            ba[id] = (byte) b;
        }

        ra[0] = (byte) (transparentColor.getRed() * 255);
        ga[0] = (byte) (transparentColor.getGreen() * 255);
        ba[0] = (byte) (transparentColor.getBlue() * 255);

        icm = new IndexColorModel(8, 256, ra, ga, ba);
    }

    //TODO input
    public static void loadLanguageTable() throws IOException {
        String fileName = "english.tbl";
        try (InputStream inputStream = Config.class.getClassLoader().getResourceAsStream(fileName)) {
            if (inputStream == null) throw new FileNotFoundException("Language table not found: " + fileName);
            languageTable = new Properties();
            languageTable.load(inputStream);

            churchs = getChurchNames();
            heroes = getHeroesNames();
            spells = getSpellsNames();

/*            for (int i = 0; i < 4; i++) {
                System.out.println(i);
                int max = getLevel(i, 30).getCombatSpells();
                for (int j = 0; j < max; j++) {
                    System.out.println(spells.get(battleSpells[i][j]));
                }
                System.out.println();
            }
            for (int i = 0; i < 4; i++) {
                System.out.println(i);
                int max = getLevel(i, 30).getCurativeSpells();
                for (int j = 0; j < max; j++) {
                    System.out.println(spells.get(overworldSpells[i][j]));
                }
                System.out.println();
            }*/

            weapons = getWeapons();
            armors = getArmors();
            shields = getShields();

            weaponNames = getNames(weapons);
            armorNames = getNames(armors);
            shieldNames = getNames(shields);

            none = languageTable.getProperty("none");

            items = getItemNames();

            prepend(weaponNames);
            prepend(armorNames);
            prepend(shieldNames);
        }
    }


    public static void loadCRCs() throws IOException {

        ClassLoader classLoader = Config.class.getClassLoader();
        File file = new File(classLoader.getResource("crcs.json").getFile());
        Type releaseType = new TypeToken<List<Release>>() {
        }.getType();
        Gson gson = new Gson();

        try {
            JsonReader reader = new JsonReader(new FileReader(file));
            releases = gson.fromJson(reader, releaseType);
        } catch (IOException e) {
            e.printStackTrace();
        }

        /*String fileName = "crcs.cfg";
        try (InputStream inputStream = Config.class.getClassLoader().getResourceAsStream(fileName)) {
            if (inputStream == null) throw new FileNotFoundException("Language table not found: " + fileName);
            crcs.load(inputStream);
        }*/
    }

    /*public static void loadLevels() throws IOException {
        String fileName = "levels.csv";
        try (InputStream inputStream = Config.class.getClassLoader().getResourceAsStream(fileName)) {
            if (inputStream == null) throw new FileNotFoundException("Levels file not found: " + fileName);
            levels = new Properties();
            levels.load(inputStream);
        }
    }*/

    private static List<String> getNames(List<Item> items) {
        List<String> result = new LinkedList<>();
        items.forEach(i -> result.add(i.getName()));
        return result;
    }

    private static List<String> getItemNames() {
        List<String> items = getGroup("item");
        items.addAll(0, shieldNames);
        items.addAll(0, armorNames);
        items.addAll(0, weaponNames);
        prepend(items);
        return items;
    }

    private static void prepend(List<String> strings) {
        strings.add(0, none);
    }

    private static List<String> getChurchNames() {
        return getGroup("church");
    }

    private static List<String> getHeroesNames() {
        return getGroup("hero");
    }

    public static List<String> getSpellsNames() {
        return getGroup("spell");
    }

    public static String getKeyByValue(char value) {
        return getKeyByValue(value + "");
    }

    public static String getKeyByValue(String value) {
        return Config.languageTable.entrySet().stream()
                .filter(e -> e.getValue().toString().split(";")[0].trim().equals(value)).findFirst()
                .map(objectEntry -> objectEntry.getKey().toString()).orElse("");
    }

    public static List<Geo> geos;

    public static List<Release> releases;

    public static List<Item> getWeapons() {
        return getItem("weapon");
    }

    public static List<Item> getArmors() {
        return getItem("armor");
    }

    public static List<Item> getShields() {
        return getItem("shield");
    }


    private static List<Item> getItem(String group) {
        return getGroup(group).stream()
                .map(value -> new Item(value.split(";")))
                .collect(Collectors.toList());
    }

    private static List<String> getGroup(String group) {
        long count = languageTable.keySet().stream()
                .filter(k -> ((String) k).matches("^" + group + "[0-9]*$")).count();
        List<String> result = new LinkedList<>();
        for (int i = 0; i < count; i++) {
            result.add(languageTable.getProperty(group + i));
        }
        return result;
    }

    public static void selectCurrentHero(int index) {
        currentHeroIndex = index;
        Config.currentHero = Config.currentSaveGame.getHeroes()[index];
    }

    public static Level getLevel(int heroId, int level) {
        return Level.fromCSV(Config.levels.getProperty(String.format("hero%s-%s", heroId, level)));
    }

    public static void loadGameFiles(File selectedFile) throws IOException {

        section = new Section();
        section.LoadFileToArray(selectedFile);
        //throw new RuntimeException("YODESK.DTA file not found");
    }
}
